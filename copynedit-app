/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { useState, useRef, useEffect, useCallback } from 'react';
import html2canvas from 'html2canvas';
// geminiService에서 새로운 함수를 가져옵니다.
import { generateMinhwaPainting } from './geminiService';
import { Loader } from '@googlemaps/js-api-loader';

// 실제 사용 시에는 이 키를 안전한 곳에 보관해야 합니다.
const GOOGLE_MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY";

const loader = new Loader({
    apiKey: GOOGLE_MAPS_API_KEY,
    version: "beta",
    libraries: ["places", "marker", "geocoding"],
});

const placeholders = [
    "경복궁, 서울특별시 종로구 사직로 161",
    "Gyeongbokgung Palace, Seoul",
    "첨성대, 경주시 인왕동 839-1",
    "Cheomseongdae, Gyeongju",
    "성산일출봉, 제주특별자치도 서귀포시 성산읍",
];

const App: React.FC = () => {
    const [address, setAddress] = useState<string>('');
    const [error, setError] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [mapInitialized, setMapInitialized] = useState<boolean>(false);
    const [isGeneratingPainting, setIsGeneratingPainting] = useState<boolean>(false);
    // 'watercolourPainting'을 'minhwaPainting'으로 변경
    const [minhwaPainting, setMinhwaPainting] = useState<string>('');
    const [capturedMapImage, setCapturedMapImage] = useState<string>('');
    const [placeholder, setPlaceholder] = useState<string>(placeholders[0]);

    const mapRef = useRef<HTMLDivElement>(null);
    const mapInstanceRef = useRef<google.maps.Map | null>(null);
    const markerInstanceRef = useRef<google.maps.marker.AdvancedMarkerElement | null>(null);
    const autocompleteRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        const intervalId = setInterval(() => {
            setPlaceholder(currentPlaceholder => {
                const currentIndex = placeholders.indexOf(currentPlaceholder);
                const nextIndex = (currentIndex + 1) % placeholders.length;
                return placeholders[nextIndex];
            });
        }, 3000);

        return () => clearInterval(intervalId);
    }, []);

    const initMap = useCallback(async (location: google.maps.LatLngLiteral, formattedAddr: string) => {
        if (!mapRef.current) return;
        const { Map } = await loader.importLibrary('maps');
        const { AdvancedMarkerElement } = await loader.importLibrary('marker');
        const mapOptions: google.maps.MapOptions = {
            center: location,
            zoom: 20,
            mapId: 'DEMO_MAP_ID',
            mapTypeId: 'satellite',
            tilt: 67.5,
            heading: 0,
            streetViewControl: false,
            mapTypeControl: false,
            fullscreenControl: false,
            zoomControl: true,
        };
        if (!mapInstanceRef.current) {
            mapInstanceRef.current = new Map(mapRef.current, mapOptions);
        } else {
            mapInstanceRef.current.setOptions(mapOptions);
        }
        setMapInitialized(true);
        setMinhwaPainting(''); // 변경
        setCapturedMapImage('');
    }, []);

    useEffect(() => {
        let autocomplete: google.maps.places.Autocomplete;
        let listener: google.maps.MapsEventListener;
        loader.load().then(() => {
            if (autocompleteRef.current) {
                autocomplete = new google.maps.places.Autocomplete(autocompleteRef.current);
                listener = autocomplete.addListener('place_changed', () => {
                    const place = autocomplete.getPlace();
                    if (place.geometry?.location && place.formatted_address) {
                        setAddress(place.formatted_address);
                        initMap(place.geometry.location.toJSON(), place.formatted_address);
                    }
                });
            }
        });
        return () => {
            if (listener) listener.remove();
        };
    }, [initMap]);

    const captureMapView = useCallback(async (): Promise<string> => {
        if (!mapRef.current) throw new Error("Map is not initialized.");
        const canvas = await html2canvas(mapRef.current, { useCORS: true, allowTaint: true });
        return canvas.toDataURL('image/png');
    }, []);

    const handleSearch = async () => {
        if (!address.trim()) {
            setError("Please enter an address.");
            return;
        }
        setIsLoading(true);
        setError(null);
        try {
            const { Geocoder } = await loader.importLibrary('geocoding');
            const geocoder = new Geocoder();
            const { results } = await geocoder.geocode({ address });
            if (results && results[0]) {
                const location = results[0].geometry.location;
                initMap(location.toJSON(), results[0].formatted_address);
            } else {
                setError(`Could not find a location for "${address}".`);
            }
        } catch (err) {
            setError(err instanceof Error ? err.message : "An unknown error occurred.");
        } finally {
            setIsLoading(false);
        }
    };
    
    // 함수 이름 및 내부 로직 변경
    const handleGenerateMinhwa = async () => {
        const isRerunning = !!minhwaPainting;
        setIsGeneratingPainting(true);
        setError(null);
        try {
            let imageToProcess = capturedMapImage;
            if (!isRerunning || !imageToProcess) {
                const newImageDataUrl = await captureMapView();
                setCapturedMapImage(newImageDataUrl);
                imageToProcess = newImageDataUrl;
            }
            const paintingDataUrl = await generateMinhwaPainting(imageToProcess);
            setMinhwaPainting(paintingDataUrl);
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to generate Minhwa painting.");
            setMinhwaPainting('');
            setCapturedMapImage('');
        } finally {
            setIsGeneratingPainting(false);
        }
    };
    
    const handleBackToMap = () => {
        setMinhwaPainting('');
    };

    const handleDownloadPainting = () => {
        if (!minhwaPainting) return;
        const link = document.createElement('a');
        link.href = minhwaPainting;
        const safeAddress = address.replace(/[^a-z0-9]/gi, '_').toLowerCase();
        link.download = `minhwa_${safeAddress || 'painting'}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    
    return (
        <div className="container mx-auto p-4 md:p-8 max-w-4xl">
            <div className="bg-white rounded-2xl shadow-lg p-6 md:p-8">
                <header>
                    <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">Paint A Place</h1>
                    <p className="text-gray-600 mb-6">Enter the address to your favorite spot, then turn the satellite image into Korean folk paintings.</p>
                </header>

                <div className="mb-4">
                    <label htmlFor="address" className="block text-sm font-medium text-gray-700 mb-1">Full Address</label>
                    <div className="relative">
                        <input
                            ref={autocompleteRef}
                            type="text"
                            id="address"
                            onChange={(e) => setAddress(e.target.value)}
                            onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
                            disabled={isLoading}
                            className="w-full pl-4 pr-12 py-2 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                            placeholder={placeholder}
                        />
                        {/* 검색 버튼 등 UI */}
                    </div>
                </div>

                <div className="flex flex-wrap gap-4 mb-4">
                    {mapInitialized && (
                        <button
                            onClick={handleGenerateMinhwa} // 변경
                            disabled={isGeneratingPainting}
                            className="flex-grow bg-green-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-green-700 shadow-md disabled:bg-green-400"
                        >
                            {isGeneratingPainting ? 'Creating...' : (minhwaPainting ? '🎨 Re-create Minhwa' : '🎨 Create Minhwa')}
                        </button>
                    )}
                    {minhwaPainting && !isGeneratingPainting && (
                        <button
                            onClick={handleBackToMap}
                            className="flex-grow bg-gray-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-gray-700"
                        >
                            🗺️ Back to Map
                        </button>
                    )}
                </div>

                {error && <div className="mt-4 p-3 bg-red-100 text-red-700 rounded-lg text-center">{error}</div>}
                
                <div className="bg-gray-50 rounded-2xl h-[70vh] shadow-inner overflow-hidden relative">
                    <div ref={mapRef} className={`w-full h-full transition-opacity duration-300 ${mapInitialized && !minhwaPainting ? 'opacity-100' : 'opacity-0'}`} />

                    {minhwaPainting && (
                        <div className="absolute inset-0 w-full h-full flex flex-col bg-white z-10">
                            <h3 className="text-lg font-semibold text-gray-900 p-4 border-b">Generated Minhwa Painting</h3>
                            <div className="flex-grow p-4 bg-gray-50 flex items-center justify-center">
                                <img src={minhwaPainting} alt="Minhwa painting of the location" className="max-w-full max-h-full object-contain rounded-lg shadow-md" />
                            </div>
                            <div className="p-4 border-t">
                                <button onClick={handleDownloadPainting} className="w-full px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700">
                                    Download
                                </button>
                            </div>
                        </div>
                    )}
                    {/* 로딩 및 초기 화면 UI */}
                </div>
            </div>
        </div>
    );
};

export default App;
